{"version":3,"sources":["i1-main/m3-dal/api.ts","i1-main/m2-bll/starWars-reducer.ts","i1-main/m1-ui/u3-components/StarWars.tsx","App.tsx","reportWebVitals.ts","i1-main/m2-bll/store.ts","index.tsx"],"names":["instance","axios","create","baseURL","headers","Vary","starWarsAPI","get","initialState","_id","email","name","publicCardPacksCount","created","Date","updated","isAdmin","verified","rememberMe","profileChanged","StarWars","dispatch","useDispatch","useEffect","then","res","catch","err","finally","type","onChange","e","inputValue","currentTarget","value","console","log","onClick","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","starWars","state","action","store","createStore","applyMiddleware","thunk","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uOAUMA,E,OAAWC,EAAMC,OAAQ,CAC3BC,QAAS,yBAWTC,QAAS,CACL,gCAAiC,MACjC,iCAAkC,IAClC,+BAAgC,IAChC,+BAAgC,IAChC,8BAA+B,wBAK/B,eAAgB,mBAChBC,KAAM,SACN,MAAS,CAAC,MAAO,OAAQ,WACzB,aAAe,KAUVC,EAAc,WAGnB,OAAON,EAASO,IAAT,WC3CTC,EAAe,CACjBC,IAAK,GACLC,MAAO,GACPC,KAAM,GACNC,qBAAsB,EACtBC,QAAS,IAAIC,KACbC,QAAS,IAAID,KACbE,SAAS,EACTC,UAAU,EACVC,YAAY,GAuCVC,EAAiB,iB,OC/CVC,EAAW,WACpB,IAAMC,EAAWC,cAEjBC,qBAAU,WACNF,GD2BkC,SAACA,GAEvCf,IACKkB,MAAK,SAACC,OAINC,OAAM,SAACC,OAIPC,SAAQ,oBCrCX,IAYF,OAAO,mCACH,gCACI,uBAAOC,KAAK,OAAOC,SAXA,SAACC,GACxB,IAAMC,EAAaD,EAAEE,cAAcC,MACnCC,QAAQC,IAAIJ,MAUR,wBAAQK,QAPY,aAOpB,0BCtBCC,EAAM,WACjB,OACE,mCACE,8BACI,cAAC,EAAD,SCMKC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,eCFRO,EAAcC,YAAgB,CAChCC,SJgB2B,WAAoF,IAAnFC,EAAkF,uDAAxD1C,EAAc2C,EAA0C,uCAC9G,OAAQA,EAAOtB,MACX,KAAKV,EACD,OAAO,eACA+B,GAEX,QACI,OAAOA,MInBNE,EAAQC,YAAYN,EAAaO,YAAgBC,MAK9DC,OAAOJ,MAAQA,ECTfK,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,CAAUP,MAAOA,EAAjB,SACI,cAAC,EAAD,QAGRQ,SAASC,eAAe,SAM5BtB,M","file":"static/js/main.6bdba775.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport type StarWarDataType = {\r\n    films: string\r\n    people: string\r\n    planets: string\r\n    species: string\r\n    starships: string\r\n    vehicles: string\r\n}\r\nconst instance = axios.create ({\r\n    baseURL: 'https://swapi.dev/api/',\r\n    // withCredentials: true,\r\n    // headers: {\r\n    //     'Access-Control-Allow-Origin': '*',\r\n    //     Accept: 'application/json',\r\n    //     'Access-Control-Allow-Headers': 'Cache-Control, Pragma, Origin, Authorization, Content-Type, X-Requested-With',\r\n    //     'Content-Type': 'application/json',\r\n    //     // 'Access-Control-Allow-Headers': 'Accept',\r\n    //     'Access-Control-Allow-Methods': 'GET',\r\n    //     mode: 'no-cors'\r\n    // },\r\n    headers: {\r\n        'Access-Control-Request-Method': 'GET',\r\n        'Access-Control-Request-Headers': '*',\r\n        'Access-Control-Allow-Headers': '*',\r\n        'Access-Control-Allow-Methods': '*',\r\n        'Access-Control-Allow-Origin': 'http://localhost:3000',\r\n        // 'Access-Control-Allow-Origin': 'http://localhost:3000/',\r\n        // 'Access-Control-Request-Headers': 'origin, x-requested-with'\r\n        // ' Access-Control-Allow-Origin': 'origin',\r\n        // 'Access-Control-Allow-Origin': null,\r\n        'Content-Type': 'application/json',\r\n        Vary: 'Accept',\r\n        'Allow': ['GET', 'HEAD', 'OPTIONS'],\r\n        'crossDomain': true,\r\n\r\n\r\n\r\n    },\r\n\r\n\r\n})\r\n\r\n\r\nexport const starWarsAPI = {\r\n    getFilms() {\r\n        debugger\r\n        return instance.get<string>(`films/`)\r\n\r\n    }\r\n}","import {ThunkAction, ThunkDispatch} from \"redux-thunk\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {AxiosResponse} from \"axios\";\r\nimport {starWarsAPI} from \"../m3-dal/api\";\r\n\r\nconst initialState = {\r\n    _id: '',\r\n    email: '',\r\n    name: '',\r\n    publicCardPacksCount: 0,\r\n    created: new Date(),\r\n    updated: new Date(),\r\n    isAdmin: false,\r\n    verified: false,\r\n    rememberMe: false,\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\ntype PROFILE = ReturnType<typeof profileAC>\r\n\r\n\r\ntype ActionsType = PROFILE\r\n\r\n\r\nexport const starWarsReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case profileChanged:\r\n            return {\r\n                ...state\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n//ac\r\nexport const profileAC = (_id: string) => ({type: profileChanged} as const)\r\n//tc\r\nexport const getFilmsTC = ():ThunkType => (dispatch: ThunkDispatch<AppRootStateType, unknown, ActionsType>) => {\r\n    // dispatch(packsLoaderAC(true))\r\n    starWarsAPI.getFilms()\r\n        .then((res:AxiosResponse<any>) => {\r\n            debugger\r\n            // dispatch(cardPacksAC(res.data.cardPacks))\r\n        })\r\n        .catch((err) => {\r\n            debugger\r\n\r\n        })\r\n        .finally(() => {\r\n            // dispatch(packsLoaderAC(false))\r\n        })\r\n}\r\n\r\nconst profileChanged = 'profileChanged'\r\n\r\ntype ThunkType = ThunkAction<void, AppRootStateType, unknown, ActionsType>","import React, {ChangeEvent, useEffect} from 'react';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {getFilmsTC} from \"../../m2-bll/starWars-reducer\";\r\n\r\n\r\n\r\nexport const StarWars = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(getFilmsTC())\r\n    },[])\r\n\r\n\r\n    const searchInputHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        const inputValue = e.currentTarget.value\r\n        console.log(inputValue)\r\n    }\r\n\r\n    const searchButtonHandler = () => {\r\n\r\n    }\r\n\r\n    return <>\r\n        <div>\r\n            <input type=\"text\" onChange={searchInputHandler}/>\r\n            <button onClick={searchButtonHandler}>Search</button>\r\n        </div>\r\n    </>\r\n}","import React from 'react';\nimport './App.css';\nimport { StarWars } from './i1-main/m1-ui/u3-components/StarWars';\n\nexport const App = () => {\n  return (\n    <>\n      <div>\n          <StarWars/>\n      </div>\n    </>\n  )\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport {starWarsReducer} from \"./starWars-reducer\";\r\nimport thunk from 'redux-thunk';\r\n\r\n\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    starWars: starWarsReducer,\r\n})\r\n\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport {store} from \"./i1-main/m2-bll/store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}